import React, { useState } from 'react';
import { Shield, AlertTriangle, Database, Zap, Clock, CheckCircle, XCircle, Eye, Brain, FileText, Network, Activity } from 'lucide-react';
import { MalwareMetrics, MalwareDetection, HeuristicAnalysis } from '../types/malwareDetection';

interface MalwareDetectionPanelProps {
  malwareMetrics: MalwareMetrics;
  onQuarantineThreat: (detectionId: string) => void;
  onCleanThreat: (detectionId: string) => void;
  onMarkFalsePositive: (detectionId: string) => void;
}

const MalwareDetectionPanel: React.FC<MalwareDetectionPanelProps> = ({ 
  malwareMetrics, 
  onQuarantineThreat, 
  onCleanThreat, 
  onMarkFalsePositive 
}) => {
  const [selectedTab, setSelectedTab] = useState<'detections' | 'signatures' | 'heuristics'>('detections');

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'border-l-danger-500 bg-danger-500/5 text-danger-400';
      case 'high': return 'border-l-warning-500 bg-warning-500/5 text-warning-400';
      case 'medium': return 'border-l-info-500 bg-info-500/5 text-info-400';
      case 'low': return 'border-l-gray-500 bg-gray-500/5 text-gray-400';
      default: return 'border-l-gray-500 bg-gray-500/5 text-gray-400';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'detected': return 'bg-danger-500/10 text-danger-400';
      case 'quarantined': return 'bg-warning-500/10 text-warning-400';
      case 'cleaned': return 'bg-success-500/10 text-success-400';
      case 'false_positive': return 'bg-gray-500/10 text-gray-400';
      default: return 'bg-gray-500/10 text-gray-400';
    }
  };

  const getMalwareTypeIcon = (type: string) => {
    switch (type) {
      case 'virus': return AlertTriangle;
      case 'trojan': return Shield;
      case 'ransomware': return XCircle;
      case 'spyware': return Eye;
      case 'worm': return Network;
      case 'rootkit': return Brain;
      default: return AlertTriangle;
    }
  };

  const getSourceStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'text-success-400 bg-success-400/10';
      case 'syncing': return 'text-info-400 bg-info-400/10';
      case 'error': return 'text-danger-400 bg-danger-400/10';
      case 'disabled': return 'text-gray-400 bg-gray-400/10';
      default: return 'text-gray-400 bg-gray-400/10';
    }
  };

  return (
    <div className="space-y-6">
      {/* Malware Detection Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-glass backdrop-blur-md border border-dark-600/50 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-3 rounded-lg bg-danger-400/10 text-danger-400">
              <AlertTriangle className="w-6 h-6" />
            </div>
            <span className="text-sm text-danger-400 font-medium">Active</span>
          </div>
          <h3 className="text-2xl font-bold text-white mb-1">{malwareMetrics.activeThreats}</h3>
          <p className="text-gray-400 text-sm">Active Threats</p>
        </div>

        <div className="bg-glass backdrop-blur-md border border-dark-600/50 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-3 rounded-lg bg-warning-400/10 text-warning-400">
              <Shield className="w-6 h-6" />
            </div>
            <span className="text-sm text-warning-400 font-medium">Secured</span>
          </div>
          <h3 className="text-2xl font-bold text-white mb-1">{malwareMetrics.quarantinedItems}</h3>
          <p className="text-gray-400 text-sm">Quarantined</p>
        </div>

        <div className="bg-glass backdrop-blur-md border border-dark-600/50 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-3 rounded-lg bg-success-400/10 text-success-400">
              <CheckCircle className="w-6 h-6" />
            </div>
            <span className="text-sm text-success-400 font-medium">Cleaned</span>
          </div>
          <h3 className="text-2xl font-bold text-white mb-1">{malwareMetrics.cleanedItems}</h3>
          <p className="text-gray-400 text-sm">Threats Removed</p>
        </div>

        <div className="bg-glass backdrop-blur-md border border-dark-600/50 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-3 rounded-lg bg-info-400/10 text-info-400">
              <Database className="w-6 h-6" />
            </div>
            <span className="text-sm text-info-400 font-medium">{malwareMetrics.heuristicEngine.accuracy.toFixed(1)}%</span>
          </div>
          <h3 className="text-2xl font-bold text-white mb-1">{(malwareMetrics.signatureDatabase.totalSignatures / 1000000).toFixed(1)}M</h3>
          <p className="text-gray-400 text-sm">Signatures</p>
        </div>
      </div>

      {/* Main Detection Panel */}
      <div className="bg-glass backdrop-blur-md border border-dark-600/50 rounded-xl p-6">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-white">Malware & Signature-Based Detection</h3>
          <div className="flex items-center space-x-2 text-sm text-gray-400">
            <Shield className="w-4 h-4" />
            <span>Real-time Protection</span>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="flex space-x-1 mb-6 bg-dark-800/50 rounded-lg p-1">
          {[
            { id: 'detections', label: 'Threat Detections', icon: AlertTriangle },
            { id: 'signatures', label: 'Signature Database', icon: Database },
            { id: 'heuristics', label: 'Heuristic Analysis', icon: Brain }
          ].map(tab => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setSelectedTab(tab.id as any)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-all duration-200 ${
                  selectedTab === tab.id
                    ? 'bg-info-500 text-white'
                    : 'text-gray-400 hover:text-white hover:bg-dark-700/50'
                }`}
              >
                <Icon className="w-4 h-4" />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* Tab Content */}
        {selectedTab === 'detections' && (
          <div className="space-y-3">
            {malwareMetrics.recentDetections.map(detection => {
              const Icon = getMalwareTypeIcon(detection.malwareType);
              return (
                <div
                  key={detection.id}
                  className={`border-l-4 p-4 rounded-r-lg ${getSeverityColor(detection.severity)} hover:bg-opacity-10 transition-all duration-200`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-start space-x-3 flex-1">
                      <div className="flex items-center space-x-2">
                        <Icon className="w-5 h-5 mt-0.5" />
                        {detection.isAIRelated && <Zap className="w-3 h-3 text-success-400" />}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="text-sm font-medium text-white">{detection.signatureName}</h4>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(detection.status)}`}>
                              {detection.status.replace('_', ' ')}
                            </span>
                            <span className="text-xs text-gray-400">{detection.timestamp}</span>
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4 text-xs text-gray-400 mb-3">
                          <div>Source: <span className="text-white">{detection.sourceIP}</span></div>
                          <div>Target: <span className="text-white">{detection.targetIP || 'N/A'}</span></div>
                          <div>Type: <span className="text-warning-400">{detection.malwareType}</span></div>
                          <div>Confidence: <span className="text-info-400">{(detection.confidence * 100).toFixed(1)}%</span></div>
                        </div>

                        <div className="mb-3">
                          <span className="text-xs text-gray-400">Affected Files:</span>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {detection.affectedFiles.map((file, idx) => (
                              <span key={idx} className="px-2 py-1 bg-dark-700 text-gray-300 text-xs rounded">
                                {file}
                              </span>
                            ))}
                          </div>
                        </div>

                        <div className="grid grid-cols-2 gap-4 text-xs text-gray-400 mb-3">
                          <div>Protocol: <span className="text-white">{detection.networkTraffic.protocol}</span></div>
                          <div>Port: <span className="text-white">{detection.networkTraffic.port}</span></div>
                          <div>Bytes: <span className="text-white">{detection.networkTraffic.bytes.toLocaleString()}</span></div>
                          <div>Packets: <span className="text-white">{detection.networkTraffic.packets.toLocaleString()}</span></div>
                        </div>

                        {detection.hashValues && (
                          <div className="mb-3 text-xs">
                            <span className="text-gray-400">Hash Values:</span>
                            <div className="mt-1 space-y-1">
                              {detection.hashValues.md5 && (
                                <div className="font-mono text-gray-300">MD5: {detection.hashValues.md5}</div>
                              )}
                              {detection.hashValues.sha256 && (
                                <div className="font-mono text-gray-300">SHA256: {detection.hashValues.sha256.substring(0, 32)}...</div>
                              )}
                            </div>
                          </div>
                        )}

                        {detection.status === 'detected' && (
                          <div className="flex space-x-2">
                            <button
                              onClick={() => onQuarantineThreat(detection.id)}
                              className="px-3 py-1 bg-warning-500/20 text-warning-400 text-xs rounded hover:bg-warning-500/30 transition-colors duration-200"
                            >
                              Quarantine
                            </button>
                            <button
                              onClick={() => onCleanThreat(detection.id)}
                              className="px-3 py-1 bg-success-500/20 text-success-400 text-xs rounded hover:bg-success-500/30 transition-colors duration-200"
                            >
                              Clean
                            </button>
                            <button
                              onClick={() => onMarkFalsePositive(detection.id)}
                              className="px-3 py-1 bg-gray-500/20 text-gray-400 text-xs rounded hover:bg-gray-500/30 transition-colors duration-200"
                            >
                              False Positive
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}

        {selectedTab === 'signatures' && (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                <div className="flex items-center justify-between mb-2">
                  <Database className="w-5 h-5 text-info-400" />
                  <span className="text-lg font-bold text-info-400">{(malwareMetrics.signatureDatabase.totalSignatures / 1000000).toFixed(1)}M</span>
                </div>
                <p className="text-sm text-gray-400">Total Signatures</p>
                <p className="text-xs text-gray-500 mt-1">Last updated: {malwareMetrics.signatureDatabase.lastUpdated}</p>
              </div>

              <div className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                <div className="flex items-center justify-between mb-2">
                  <Activity className="w-5 h-5 text-success-400" />
                  <span className="text-lg font-bold text-success-400">{malwareMetrics.signatureDatabase.sources.filter(s => s.status === 'active').length}</span>
                </div>
                <p className="text-sm text-gray-400">Active Sources</p>
                <p className="text-xs text-gray-500 mt-1">Real-time updates</p>
              </div>

              <div className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                <div className="flex items-center justify-between mb-2">
                  <CheckCircle className="w-5 h-5 text-warning-400" />
                  <span className="text-lg font-bold text-warning-400">{malwareMetrics.heuristicEngine.accuracy.toFixed(1)}%</span>
                </div>
                <p className="text-sm text-gray-400">Detection Accuracy</p>
                <p className="text-xs text-gray-500 mt-1">Heuristic engine</p>
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="text-sm font-medium text-gray-400 mb-3">Signature Sources</h4>
              {malwareMetrics.signatureDatabase.sources.map(source => (
                <div key={source.id} className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <Database className="w-5 h-5 text-info-400" />
                      <div>
                        <h4 className="text-sm font-medium text-white">{source.source.toUpperCase()}</h4>
                        <p className="text-xs text-gray-400">Sync interval: {source.syncInterval} minutes</p>
                      </div>
                    </div>
                    <span className={`px-2 py-1 rounded text-xs ${getSourceStatusColor(source.status)}`}>
                      {source.status}
                    </span>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 text-xs">
                    <div>
                      <span className="text-gray-400">Signatures:</span>
                      <span className="text-white ml-1 font-medium">{source.signatureCount.toLocaleString()}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Last Sync:</span>
                      <span className="text-white ml-1 font-medium">{source.lastSync}</span>
                    </div>
                  </div>
                  
                  {source.errorMessage && (
                    <div className="mt-2 p-2 bg-danger-500/10 border border-danger-500/20 rounded text-xs text-danger-400">
                      {source.errorMessage}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        {selectedTab === 'heuristics' && (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                <div className="flex items-center justify-between mb-2">
                  <Brain className="w-5 h-5 text-success-400" />
                  <span className="text-lg font-bold text-success-400">{malwareMetrics.heuristicEngine.analysisCount.toLocaleString()}</span>
                </div>
                <p className="text-sm text-gray-400">Analyses Performed</p>
              </div>

              <div className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                <div className="flex items-center justify-between mb-2">
                  <CheckCircle className="w-5 h-5 text-info-400" />
                  <span className="text-lg font-bold text-info-400">{malwareMetrics.heuristicEngine.accuracy.toFixed(1)}%</span>
                </div>
                <p className="text-sm text-gray-400">Accuracy Rate</p>
              </div>

              <div className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                <div className="flex items-center justify-between mb-2">
                  <AlertTriangle className="w-5 h-5 text-warning-400" />
                  <span className="text-lg font-bold text-warning-400">{malwareMetrics.heuristicEngine.averageRiskScore.toFixed(1)}</span>
                </div>
                <p className="text-sm text-gray-400">Avg Risk Score</p>
              </div>
            </div>

            <div className="space-y-3">
              {malwareMetrics.heuristicAnalyses.map(analysis => (
                <div key={analysis.id} className="p-4 bg-dark-800/30 rounded-lg border border-dark-600/20">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <Brain className="w-5 h-5 text-info-400" />
                      <div>
                        <h4 className="text-sm font-medium text-white">{analysis.entityId}</h4>
                        <p className="text-xs text-gray-400">{analysis.entityType} • {analysis.timestamp}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className={`text-sm font-bold ${analysis.riskScore > 7 ? 'text-danger-400' : analysis.riskScore > 4 ? 'text-warning-400' : 'text-success-400'}`}>
                        {analysis.riskScore.toFixed(1)}/10
                      </div>
                      <div className="text-xs text-gray-400">Risk Score</div>
                    </div>
                  </div>
                  
                  <div className="mb-3">
                    <span className="text-xs text-gray-400">Suspicious Activities:</span>
                    <div className="mt-1 space-y-1">
                      {analysis.suspiciousActivities.map((activity, idx) => (
                        <div key={idx} className="text-xs text-warning-400">• {activity}</div>
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs mb-3">
                    <div>
                      <span className="text-gray-400">File Ops:</span>
                      <span className="text-white ml-1">{analysis.behaviorPatterns.fileOperations}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Network:</span>
                      <span className="text-white ml-1">{analysis.behaviorPatterns.networkConnections}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Registry:</span>
                      <span className="text-white ml-1">{analysis.behaviorPatterns.registryChanges}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Processes:</span>
                      <span className="text-white ml-1">{analysis.behaviorPatterns.processCreations}</span>
                    </div>
                  </div>

                  <div className="flex items-center justify-between text-xs">
                    <div className="flex items-center space-x-4">
                      <span className="text-gray-400">
                        AI Prediction: 
                        <span className={`ml-1 ${analysis.aiModelPrediction.isMalicious ? 'text-danger-400' : 'text-success-400'}`}>
                          {analysis.aiModelPrediction.isMalicious ? 'Malicious' : 'Benign'}
                        </span>
                      </span>
                      <span className="text-gray-400">
                        Confidence: <span className="text-info-400">{(analysis.aiModelPrediction.confidence * 100).toFixed(1)}%</span>
                      </span>
                    </div>
                    <span className="text-gray-400">Model: {analysis.aiModelPrediction.modelVersion}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default MalwareDetectionPanel;